input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Banner {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  slug: String
  name: String
  items: [ComponentVariantsItems]
}

type BannerConnection {
  values: [Banner]
  groupBy: BannerGroupBy
  aggregate: BannerAggregator
}

type BannerAggregator {
  count: Int
  totalCount: Int
}

type BannerGroupBy {
  id: [BannerConnectionId]
  created_at: [BannerConnectionCreated_at]
  updated_at: [BannerConnectionUpdated_at]
  slug: [BannerConnectionSlug]
  name: [BannerConnectionName]
}

type BannerConnectionId {
  key: ID
  connection: BannerConnection
}

type BannerConnectionCreated_at {
  key: DateTime
  connection: BannerConnection
}

type BannerConnectionUpdated_at {
  key: DateTime
  connection: BannerConnection
}

type BannerConnectionSlug {
  key: String
  connection: BannerConnection
}

type BannerConnectionName {
  key: String
  connection: BannerConnection
}

input BannerInput {
  slug: String
  name: String
  items: [ComponentVariantsItemInput]
  created_by: ID
  updated_by: ID
}

input editBannerInput {
  slug: String
  name: String
  items: [editComponentVariantsItemInput]
  created_by: ID
  updated_by: ID
}

input createBannerInput {
  data: BannerInput
}

type createBannerPayload {
  banner: Banner
}

input updateBannerInput {
  where: InputID
  data: editBannerInput
}

type updateBannerPayload {
  banner: Banner
}

input deleteBannerInput {
  where: InputID
}

type deleteBannerPayload {
  banner: Banner
}

type Collection {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
}

type CollectionConnection {
  values: [Collection]
  groupBy: CollectionGroupBy
  aggregate: CollectionAggregator
}

type CollectionAggregator {
  count: Int
  totalCount: Int
}

type CollectionGroupBy {
  id: [CollectionConnectionId]
  created_at: [CollectionConnectionCreated_at]
  updated_at: [CollectionConnectionUpdated_at]
  name: [CollectionConnectionName]
  slug: [CollectionConnectionSlug]
}

type CollectionConnectionId {
  key: ID
  connection: CollectionConnection
}

type CollectionConnectionCreated_at {
  key: DateTime
  connection: CollectionConnection
}

type CollectionConnectionUpdated_at {
  key: DateTime
  connection: CollectionConnection
}

type CollectionConnectionName {
  key: String
  connection: CollectionConnection
}

type CollectionConnectionSlug {
  key: String
  connection: CollectionConnection
}

input CollectionInput {
  name: String
  slug: String
  products: [ID]
  created_by: ID
  updated_by: ID
}

input editCollectionInput {
  name: String
  slug: String
  products: [ID]
  created_by: ID
  updated_by: ID
}

input createCollectionInput {
  data: CollectionInput
}

type createCollectionPayload {
  collection: Collection
}

input updateCollectionInput {
  where: InputID
  data: editCollectionInput
}

type updateCollectionPayload {
  collection: Collection
}

input deleteCollectionInput {
  where: InputID
}

type deleteCollectionPayload {
  collection: Collection
}

type Product {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  variants: [ComponentVariantsVariants]
  slug: String
  product_ref_id: String
  collections(sort: String, limit: Int, start: Int, where: JSON): [Collection]
}

type ProductConnection {
  values: [Product]
  groupBy: ProductGroupBy
  aggregate: ProductAggregator
}

type ProductAggregator {
  count: Int
  totalCount: Int
}

type ProductGroupBy {
  id: [ProductConnectionId]
  created_at: [ProductConnectionCreated_at]
  updated_at: [ProductConnectionUpdated_at]
  title: [ProductConnectionTitle]
  slug: [ProductConnectionSlug]
  product_ref_id: [ProductConnectionProduct_ref_id]
}

type ProductConnectionId {
  key: ID
  connection: ProductConnection
}

type ProductConnectionCreated_at {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionUpdated_at {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionTitle {
  key: String
  connection: ProductConnection
}

type ProductConnectionSlug {
  key: String
  connection: ProductConnection
}

type ProductConnectionProduct_ref_id {
  key: String
  connection: ProductConnection
}

input ProductInput {
  title: String
  variants: [ComponentVariantsVariantInput]
  collections: [ID]
  slug: String
  product_ref_id: String
  created_by: ID
  updated_by: ID
}

input editProductInput {
  title: String
  variants: [editComponentVariantsVariantInput]
  collections: [ID]
  slug: String
  product_ref_id: String
  created_by: ID
  updated_by: ID
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Product
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Product
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Product
}

type Promotions {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  items: [ComponentItemsItems]
}

type PromotionsConnection {
  values: [Promotions]
  groupBy: PromotionsGroupBy
  aggregate: PromotionsAggregator
}

type PromotionsAggregator {
  count: Int
  totalCount: Int
}

type PromotionsGroupBy {
  id: [PromotionsConnectionId]
  created_at: [PromotionsConnectionCreated_at]
  updated_at: [PromotionsConnectionUpdated_at]
  name: [PromotionsConnectionName]
  slug: [PromotionsConnectionSlug]
}

type PromotionsConnectionId {
  key: ID
  connection: PromotionsConnection
}

type PromotionsConnectionCreated_at {
  key: DateTime
  connection: PromotionsConnection
}

type PromotionsConnectionUpdated_at {
  key: DateTime
  connection: PromotionsConnection
}

type PromotionsConnectionName {
  key: String
  connection: PromotionsConnection
}

type PromotionsConnectionSlug {
  key: String
  connection: PromotionsConnection
}

input PromotionInput {
  name: String
  slug: String
  items: [ComponentItemsItemInput]
  created_by: ID
  updated_by: ID
}

input editPromotionInput {
  name: String
  slug: String
  items: [editComponentItemsItemInput]
  created_by: ID
  updated_by: ID
}

input createPromotionInput {
  data: PromotionInput
}

type createPromotionPayload {
  promotion: Promotions
}

input updatePromotionInput {
  where: InputID
  data: editPromotionInput
}

type updatePromotionPayload {
  promotion: Promotions
}

input deletePromotionInput {
  where: InputID
}

type deletePromotionPayload {
  promotion: Promotions
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentItemsItems {
  id: ID!
  name: String
  slug: String
  image: UploadFile
  link: String
}

input ComponentItemsItemInput {
  name: String
  slug: String
  image: ID
  link: String
}

input editComponentItemsItemInput {
  id: ID
  name: String
  slug: String
  image: ID
  link: String
}

type ComponentProductSizeSizes {
  id: ID!
  name: String
  character: String
}

input ComponentProductSizeSizeInput {
  name: String
  character: String
}

input editComponentProductSizeSizeInput {
  id: ID
  name: String
  character: String
}

type ComponentVariantsItems {
  id: ID!
  isImage: Boolean
  image: UploadFile
  title: String
  desc: String
  btn_text: String
  desc_hightlight: String
  text_on_top: String
}

input ComponentVariantsItemInput {
  isImage: Boolean
  image: ID
  title: String
  desc: String
  btn_text: String
  desc_hightlight: String
  text_on_top: String
}

input editComponentVariantsItemInput {
  id: ID
  isImage: Boolean
  image: ID
  title: String
  desc: String
  btn_text: String
  desc_hightlight: String
  text_on_top: String
}

type ComponentVariantsVariants {
  id: ID!
  price: Float
  sale_price: Float
  thumbnail: UploadFile
  name: String
  sizes: [ComponentProductSizeSizes]
  is_sale: Boolean
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ComponentVariantsVariantInput {
  images: [ID]
  price: Float
  sale_price: Float
  thumbnail: ID
  name: String
  sizes: [ComponentProductSizeSizeInput]
  is_sale: Boolean
}

input editComponentVariantsVariantInput {
  id: ID
  images: [ID]
  price: Float
  sale_price: Float
  thumbnail: ID
  name: String
  sizes: [editComponentProductSizeSizeInput]
  is_sale: Boolean
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Banner | BannerConnection | BannerAggregator | BannerGroupBy | BannerConnectionId | BannerConnectionCreated_at | BannerConnectionUpdated_at | BannerConnectionSlug | BannerConnectionName | createBannerPayload | updateBannerPayload | deleteBannerPayload | Collection | CollectionConnection | CollectionAggregator | CollectionGroupBy | CollectionConnectionId | CollectionConnectionCreated_at | CollectionConnectionUpdated_at | CollectionConnectionName | CollectionConnectionSlug | createCollectionPayload | updateCollectionPayload | deleteCollectionPayload | Product | ProductConnection | ProductAggregator | ProductGroupBy | ProductConnectionId | ProductConnectionCreated_at | ProductConnectionUpdated_at | ProductConnectionTitle | ProductConnectionSlug | ProductConnectionProduct_ref_id | createProductPayload | updateProductPayload | deleteProductPayload | Promotions | PromotionsConnection | PromotionsAggregator | PromotionsGroupBy | PromotionsConnectionId | PromotionsConnectionCreated_at | PromotionsConnectionUpdated_at | PromotionsConnectionName | PromotionsConnectionSlug | createPromotionPayload | updatePromotionPayload | deletePromotionPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentItemsItems | ComponentProductSizeSizes | ComponentVariantsItems | ComponentVariantsVariants

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  banner(id: ID!, publicationState: PublicationState): Banner
  banners(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Banner]
  bannersConnection(sort: String, limit: Int, start: Int, where: JSON): BannerConnection
  collection(id: ID!, publicationState: PublicationState): Collection
  collections(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Collection]
  collectionsConnection(sort: String, limit: Int, start: Int, where: JSON): CollectionConnection
  product(id: ID!, publicationState: PublicationState): Product
  products(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Product]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductConnection
  promotion(id: ID!, publicationState: PublicationState): Promotions
  promotions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Promotions]
  promotionsConnection(sort: String, limit: Int, start: Int, where: JSON): PromotionsConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createBanner(input: createBannerInput): createBannerPayload
  updateBanner(input: updateBannerInput): updateBannerPayload
  deleteBanner(input: deleteBannerInput): deleteBannerPayload
  createCollection(input: createCollectionInput): createCollectionPayload
  updateCollection(input: updateCollectionInput): updateCollectionPayload
  deleteCollection(input: deleteCollectionInput): deleteCollectionPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createPromotion(input: createPromotionInput): createPromotionPayload
  updatePromotion(input: updatePromotionInput): updatePromotionPayload
  deletePromotion(input: deletePromotionInput): deletePromotionPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
